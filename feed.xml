<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://sgoutam.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://sgoutam.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-04-05T19:04:28+00:00</updated><id>https://sgoutam.github.io/feed.xml</id><title type="html">blank</title><subtitle>Personal website of Sanket Goutam, Ph.D. candidate at Stony Brook University. </subtitle><entry><title type="html">Styling Conventions Make Things Easier</title><link href="https://sgoutam.github.io/blog/2025/styling_guide/" rel="alternate" type="text/html" title="Styling Conventions Make Things Easier"/><published>2025-01-14T00:00:00+00:00</published><updated>2025-01-14T00:00:00+00:00</updated><id>https://sgoutam.github.io/blog/2025/styling_guide</id><content type="html" xml:base="https://sgoutam.github.io/blog/2025/styling_guide/"><![CDATA[<blockquote> <p>A foolish consistency is the hobgoblin of little minds. â€” Guido van Rossum</p> </blockquote> <div class="row mt-3 justify-content-center"> <div class="col-auto text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/xkcd_file-names-480.webp 480w,/assets/img/xkcd_file-names-800.webp 800w,/assets/img/xkcd_file-names-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/xkcd_file-names.png" class="img-fluid rounded z-depth-1" width="300" height="200" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> xkcd #1459 - Documents </div> <p>Naming conventions are a personal framework for organizing work in a way that describes what they contain and how they relate to each other. File naming conventions, for instance, help stay organized as projects grow bigger and quickly identify work files. In a shared or collaborative group file-sharing setting, file naming conventions allow others to easily navigate through the project. Similarly, coding conventions are programming language-specific guidelines that offer recommendations for writing clean and maintainable code.</p> <p>This page documents the guidelines for each of these tasks that I have personally found to be effective. Sticking to certain conventions helps organize my work and reduces downstream (or upstream) complexity when revisiting old projects or creating new ones.</p> <h2 id="file-naming">File Naming</h2> <p>When naming certain files, think about how they may be used in the future. Naming convention may differ based on file types.</p> <h3 id="general-principles">General Principles</h3> <ol> <li>Use lowercase letters to maintain consistency across systems.</li> <li>Use hyphens (<code class="language-plaintext highlighter-rouge">-</code>) to separate words for readability.</li> <li>Use underscores (<code class="language-plaintext highlighter-rouge">_</code>) to separate sections in the file name.</li> <li>Include versioning (<code class="language-plaintext highlighter-rouge">v1</code>, <code class="language-plaintext highlighter-rouge">v2</code>, etc.) for iterative changes.</li> <li>Add timestamps in <code class="language-plaintext highlighter-rouge">YYYYMMDD</code> format for chronological tracking, when necessary.</li> <li>Use consistent extensions (<code class="language-plaintext highlighter-rouge">.md</code>, <code class="language-plaintext highlighter-rouge">.pdf</code>, <code class="language-plaintext highlighter-rouge">.jpg</code>, etc.) to reflect file types.</li> </ol> <p><strong>Time Format</strong> Use the version date (use ISO 8601 format: YYYYMMDD or YYYY-MM-DD). Date formats can be very confusing. Use the standardized format to make sure your files can always be in a chronological order.</p> <p><strong>Delimiters</strong></p> <ul> <li><strong>Hyphens (<code class="language-plaintext highlighter-rouge">-</code>)</strong>: <ul> <li>Use for separating words within a <strong>single section</strong> of the file name.</li> <li>Improves readability, especially in filenames intended to describe a concept or a phrase (e.g., <code class="language-plaintext highlighter-rouge">iot-threat-model</code> or <code class="language-plaintext highlighter-rouge">privacy-engineering</code>).</li> </ul> </li> <li><strong>Underscores (<code class="language-plaintext highlighter-rouge">_</code>)</strong>: <ul> <li>Use to separate <strong>different sections</strong> of the file name, such as project, functionality, version, or date.</li> <li>Useful to visually distinguish structural parts of the file name.</li> </ul> </li> </ul> <h3 id="naming-structure">Naming Structure</h3> <ol> <li> <p><strong>Programming Projects</strong></p> <ul> <li> <p><strong>Format</strong>: <code class="language-plaintext highlighter-rouge">&lt;project-name&gt;_&lt;module-or-functionality&gt;_&lt;optional-context&gt;_&lt;version&gt;.&lt;file-extension&gt;</code></p> </li> <li> <p><strong>Examples</strong>:</p> <ul> <li><code class="language-plaintext highlighter-rouge">network-tool_parser_v1.py</code> (Python script for a parser in a network tool project)</li> <li><code class="language-plaintext highlighter-rouge">iot-security_analysis_v20250117.md</code> (Analysis for an IoT security project)</li> <li><code class="language-plaintext highlighter-rouge">android-privacy_engine-v2.cpp</code> (C++ implementation of a privacy engine)</li> </ul> </li> </ul> </li> <li> <p><strong>Personal Notes</strong></p> <ul> <li><strong>Research Notes</strong>: <code class="language-plaintext highlighter-rouge">&lt;topic&gt;_&lt;subtopic-or-keywords&gt;_&lt;timestamp&gt;.&lt;file-extension&gt;</code> <ul> <li><strong>Examples</strong>: <ul> <li><code class="language-plaintext highlighter-rouge">blockchain_consensus-algorithms_20250117.md</code></li> <li><code class="language-plaintext highlighter-rouge">privacy_engineering_general-overview_2025.pdf</code></li> </ul> </li> </ul> </li> <li><strong>Technology Notes</strong>: <code class="language-plaintext highlighter-rouge">&lt;tech-name&gt;_&lt;context-or-focus&gt;_&lt;timestamp&gt;.&lt;file-extension&gt;</code> <ul> <li><strong>Examples</strong>: <ul> <li><code class="language-plaintext highlighter-rouge">linux_networking_advanced_20250117.md</code></li> <li><code class="language-plaintext highlighter-rouge">python_asyncio-tutorial_2024.pdf</code></li> </ul> </li> </ul> </li> <li><strong>Research Statements</strong>: <code class="language-plaintext highlighter-rouge">&lt;statement-topic&gt;_&lt;version&gt;.&lt;file-extension&gt;</code> <ul> <li><strong>Examples</strong>: <ul> <li><code class="language-plaintext highlighter-rouge">security-roadmap_v3.md</code></li> <li><code class="language-plaintext highlighter-rouge">iot-research-vision_v1.pdf</code></li> </ul> </li> </ul> </li> </ul> </li> <li><strong>Image Files</strong> <ul> <li><strong>Format</strong>: <code class="language-plaintext highlighter-rouge">&lt;project-or-topic&gt;_&lt;context-or-description&gt;_&lt;timestamp&gt;.&lt;file-extension&gt;</code></li> <li><strong>Examples</strong>: <ul> <li><code class="language-plaintext highlighter-rouge">android-architecture-diagram_20250117.jpg</code></li> <li><code class="language-plaintext highlighter-rouge">iot-threat-model_visualization_v2.png</code></li> </ul> </li> </ul> </li> <li><strong>Miscellaneous Files</strong> <ul> <li>Use generic names with descriptive elements and dates for non-categorized items.</li> <li><strong>Examples</strong>: - <code class="language-plaintext highlighter-rouge">meeting-notes_privacy-research_20250117.md</code> - <code class="language-plaintext highlighter-rouge">experiment-results_ml-v2_20250117.csv</code></li> </ul> </li> </ol> <p><br/></p> <h2 id="code-styling">Code Styling</h2> <p><br/></p> <blockquote> <p>PEP-8 style guide has been an incredibly popular coding convention for Python, and rightfully so. While I personally would love to adopt the same styling for all languages, it is not that straightforward. Since I personally use Python the most I document most guidelines from the PEP-8 styling document. However, it is recommended to follow the style guide for that language.</p> <p><a href="https://google.github.io/styleguide/">Google Style Guides</a> is probably the best resource for this.</p> </blockquote> <div class="row mt-3 justify-content-center"> <div class="col-auto text-center"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/pep8-cheatsheet-480.webp 480w,/assets/img/pep8-cheatsheet-800.webp 800w,/assets/img/pep8-cheatsheet-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/pep8-cheatsheet.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Python Code Styling Cheatsheet -- Google Style Guides </div> <p><strong>File and Directory Naming</strong></p> <ol> <li><strong>File Names</strong>: <ul> <li>Use lowercase letters with underscores to separate words.</li> <li>Keep file names descriptive but concise.</li> <li><strong>Examples</strong>: <ul> <li><code class="language-plaintext highlighter-rouge">data_parser.py</code></li> <li><code class="language-plaintext highlighter-rouge">network_utility.py</code></li> <li><code class="language-plaintext highlighter-rouge">test_iot_security.py</code></li> </ul> </li> </ul> </li> <li><strong>Directory Names</strong>: <ul> <li>Use lowercase letters with underscores.</li> <li>Reflect the logical grouping of modules.</li> <li><strong>Examples</strong>: <ul> <li><code class="language-plaintext highlighter-rouge">utils/</code></li> <li><code class="language-plaintext highlighter-rouge">data_processing/</code></li> <li><code class="language-plaintext highlighter-rouge">models/</code></li> </ul> </li> </ul> </li> </ol> <p><strong>Module Naming</strong></p> <ul> <li>Follow the same convention as file names: lowercase with underscores.</li> <li>Name modules after their primary functionality.</li> <li><strong>Examples</strong>: - <code class="language-plaintext highlighter-rouge">data_cleaner.py</code> - <code class="language-plaintext highlighter-rouge">json_handler.py</code></li> </ul> <p><strong>Class Naming</strong></p> <ul> <li>Use the <strong>PascalCase</strong> convention (capitalize each word without underscores).</li> <li>Class names should be nouns representing objects or entities.</li> <li><strong>Examples</strong>: - <code class="language-plaintext highlighter-rouge">DataParser</code> - <code class="language-plaintext highlighter-rouge">IoTSecurityAnalyzer</code></li> </ul> <p><strong>Function Naming</strong></p> <ul> <li>Use <strong>snake_case</strong> (lowercase with underscores).</li> <li>Function names should describe their action or purpose.</li> <li><strong>Examples</strong>: <ul> <li><code class="language-plaintext highlighter-rouge">parse_data()</code></li> <li><code class="language-plaintext highlighter-rouge">validate_credentials()</code></li> <li><code class="language-plaintext highlighter-rouge">get_network_status()</code></li> </ul> </li> </ul> <p><strong>Variable Naming</strong></p> <ul> <li>Use <strong>snake_case</strong> for variables.</li> <li>Variables should be descriptive and indicate their purpose.</li> <li>Use short, clear names for local variables.</li> <li><strong>Examples</strong>: - <code class="language-plaintext highlighter-rouge">user_input</code> - <code class="language-plaintext highlighter-rouge">file_path</code> - <code class="language-plaintext highlighter-rouge">connection_status</code></li> </ul> <p><strong>Constant Naming</strong></p> <ul> <li>Use <strong>UPPERCASE_WITH_UNDERSCORES</strong> for constants.</li> <li>Place constants at the top of the module or in a dedicated configuration file.</li> <li><strong>Examples</strong>: - <code class="language-plaintext highlighter-rouge">API_KEY</code> - <code class="language-plaintext highlighter-rouge">DEFAULT_TIMEOUT</code> - <code class="language-plaintext highlighter-rouge">MAX_CONNECTIONS</code></li> </ul> <p><strong>Function Arguments</strong></p> <ul> <li>Use <strong>snake_case</strong> for argument names.</li> <li>Avoid single-character arguments except for standard cases (<code class="language-plaintext highlighter-rouge">i</code>, <code class="language-plaintext highlighter-rouge">j</code>, etc.).</li> <li>Provide default values where applicable.</li> <li><strong>Examples</strong>: - <code class="language-plaintext highlighter-rouge">def connect_to_server(host, port=8080):</code> - <code class="language-plaintext highlighter-rouge">def filter_data(dataset, filter_type='default'):</code></li> </ul> <p><strong>Testing Naming Conventions</strong></p> <ol> <li><strong>Test Files</strong>: <ul> <li>Prefix with <code class="language-plaintext highlighter-rouge">test_</code> and match the name of the module being tested.</li> <li><strong>Example</strong>: <ul> <li><code class="language-plaintext highlighter-rouge">test_data_parser.py</code></li> </ul> </li> </ul> </li> <li><strong>Test Functions</strong>: <ul> <li>Use <code class="language-plaintext highlighter-rouge">test_</code> followed by the function or feature being tested.</li> <li><strong>Examples</strong>: <ul> <li><code class="language-plaintext highlighter-rouge">test_parse_data()</code></li> <li><code class="language-plaintext highlighter-rouge">test_connection_status()</code></li> </ul> </li> </ul> </li> </ol> <h3 id="general-styling-rules">General Styling Rules</h3> <ol> <li><strong>Indentation</strong>: Use 4 spaces per indentation level.</li> <li><strong>Line Length</strong>: Limit to 79 characters for code and 72 characters for comments/docstrings.</li> <li><strong>Imports</strong>: <ul> <li>Group imports into three sections: <ol> <li>Standard library imports.</li> <li>Third-party library imports.</li> <li>Local application imports.</li> </ol> </li> <li>Example: ```python import os import sys</li> </ul> <p>import requests</p> <p>from my_project.utils import helper ```</p> </li> <li><strong>Docstrings</strong>: <ul> <li>Use triple double quotes (<code class="language-plaintext highlighter-rouge">"""</code>) for module, class, and function docstrings.</li> <li>Describe the purpose, parameters, and return values.</li> <li><strong>Example</strong>: <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">add_numbers</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        Add two numbers.
		
        Args:
            a (int): The first number.
            b (int): The second number.
		
        Returns:
            int: The sum of the two numbers.
        </span><span class="sh">"""</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</code></pre></div> </div> </li> </ul> </li> </ol> <p>This naming and styling convention ensures consistency, readability, and maintainability across your programming projects while adhering to PEP 8 standards.</p> <h3 id="sources">Source(s):</h3> <blockquote> <ol> <li><a href="https://google.github.io/styleguide/pyguide.html#3164-guidelines-derived-from-guidos-recommendations">Google Python Style Guide</a></li> </ol> </blockquote>]]></content><author><name></name></author><summary type="html"><![CDATA[Personal framework for organizing files and projects]]></summary></entry><entry><title type="html">What is a Ph.D. in Computer Science?</title><link href="https://sgoutam.github.io/blog/2025/phd_wisdom/" rel="alternate" type="text/html" title="What is a Ph.D. in Computer Science?"/><published>2025-01-10T00:00:00+00:00</published><updated>2025-01-10T00:00:00+00:00</updated><id>https://sgoutam.github.io/blog/2025/phd_wisdom</id><content type="html" xml:base="https://sgoutam.github.io/blog/2025/phd_wisdom/"><![CDATA[<blockquote> <p>Note: This is not an exhaustive list in any way, there are many awesome people who have created better curated lists elsewhere. This is merely a self-reflection on the things that I have found very useful during my Ph.D and often end up revisiting from time to time.</p> </blockquote> <p>Ph.D. is a very arduous journey and there are several anecdotal reflections from graduates that can attest to it [<a href="https://maithraraghu.com/blog/2020/Reflections_on_my_Machine_Learning_PhD_Journey/">1</a>, <a href="https://www.goodreads.com/book/show/15731248-the-ph-d-grind">2</a>, <a href="https://karpathy.github.io/2016/09/07/phd/">3</a>]. This is not a reflection, given that I havenâ€™t graduated yet, but also because there is already a lot of good advice to find from these sources and elsewhere on the Internet.</p> <p>I wish to use this space to document resources that I personally have found valuable during my Ph.D. journey. I discovered some of them prior to my Ph.D., most during, but I find myself coming back to them every once in a while. I document them here mostly for personal reference, but also publish them online in hopes that someone might benefit.</p> <p>The singular motivation behind this collection is to (hopefully) answer the question <em>``What is a Ph.D in Computer Science?â€™â€˜</em>. Coming from a first-generation college student background, I have been faced with this question (and variations with <em>WHY?</em>) more times than I could keep track. I started reading anecdotes from other Ph.D. students (nay survivors!) to somehow convince myself that I too can come up with an answer. I can not, in any certain terms, state a constructive answer just yet. Perhaps, one day when I am done with my Ph.D. I might be able to reflectively articulate it. Until then, this collection shall remain to guide others to a treasure I cannot yet possess.</p> <ol> <li> <p><a href="https://www.goodreads.com/book/show/15731248-the-ph-d-grind">The Ph.D. Grind by Philip Guo</a> is a highly-recommended read for any Ph.D. student. He wrote the book immediately after finishing his Ph.D. and chronicles the pitfalls, struggles, the highs and lows of his journey in this memoir accurately detailing all the frustations of being in academia.</p> </li> <li> <p><a href="https://github.com/TheShadow29/research-advice-list">Research Advice List</a>. This repo partially also serves as the motivation for documenting things on this page.</p> </li> <li> <p><a href="https://karpathy.github.io/2016/09/07/phd/">Andrej Karpathyâ€™s Survival Guide to a PhD</a> has been very instrumental. I think he encapsulates the various facets of doing research and being a PhD student really well.</p> </li> <li> <p><a href="https://matt.might.net/articles/phd-school-in-pictures/">The Illustrated Guide to a Ph.D. by Matt Might</a>. This is one of the best explanations (probably the only illustrative explanation) of what a Ph.D. is. As he right fully points out ``Itâ€™s hard to describe in wordsâ€™â€™, his illustrative explanation has become the go-to way of describing a Phd to my friends and family.</p> </li> </ol>]]></content><author><name></name></author><summary type="html"><![CDATA[Collection of articles that helped me ground my expectations from the Ph.D. program.]]></summary></entry></feed>